import os
import json
import logging
from datetime import datetime, timedelta
from random import randint, choice
from pyrogram.client import Client
from pyrogram import filters
from pyrogram.enums import PollType
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
import traceback
import time
import random
import requests
import re
import google.generativeai as genai

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
api_id = 27300988
api_hash = "c7e02bdf78d426003e728343d05382ec"
bot_token = '7827074083:AAGHQXjB34aam_xbjCe8CnZQLAb5-nhXf3A'
bot_name = '–ö—Ä–∏–Ω–∂–∏–∫'
channel_id = '@uctovbus'
admin_ids = [1249361958]  # –≤–∞—à Telegram ID
admin_usernames = ['professional012']  # –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º

emojis = list("üåüüò¢üßÇü§ëüíÉüëèüëãü§≠ü§™ü§îüòßü§¶üòõü§®üëçüêçü•∞‚òïüòÄüòçü´êüá∫üá¶‚å®Ô∏èüòéüé©üò≥üòïüò±üèÉüòÇ‚úçÔ∏èü§ì‚òîÔ∏èüò≠üôÉüò∑ü§§üòâü§°üôÇ")
karmadata_file = "karma_data.json"
active_polls = {}
character_data_file = "character_data.json"
try:
    with open(character_data_file, "r", encoding="utf-8") as f:
        character_data = json.load(f)
except FileNotFoundError:
    character_data = {}

def save_character_data(data):
    with open(character_data_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Google Gemini API KEY ---
GEMINI_API_KEY = "AIzaSyAKF3lL5X0PxvFyvXzuEQVqgAUZWbPIjY8"
genai.configure(api_key=GEMINI_API_KEY)

# --- –ñ–∞—Ä—Ç—ñ–≤–ª–∏–≤—ñ –≥–æ—Ä–æ—Å–∫–æ–ø–∏ ---

# --- –ñ–∞—Ä—Ç—ñ–≤–ª–∏–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –≥—Ä–∏ –¢–∞–∫ —á–∏ –ù—ñ ---
yesno_answers = [
    "–¢–∞–∫! –Ü –Ω–∞–≤—ñ—Ç—å –Ω–µ —Å—É–º–Ω—ñ–≤–∞–π—Å—è!",
    "–ù—ñ, —ñ –∫—Ä–∞—â–µ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–π!",
    "–ú–æ–∂–ª–∏–≤–æ... –∞–ª–µ —Ü–µ –Ω–µ —Ç–æ—á–Ω–æ.",
    "–ó—ñ—Ä–∫–∏ –∫–∞–∂—É—Ç—å: —Ç–∞–∫, –∞–ª–µ –∑ –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—é!",
    "–ù—ñ, –∞–ª–µ —Ç–∏ –º–æ–∂–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑!",
    "100% —Ç–∞–∫! (–∞–±–æ –Ω—ñ)",
    "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑–∞–ø–∏—Ç–∞—Ç–∏ ‚Äî –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–º—ñ–Ω–∏—Ç—å—Å—è!",
    "–¢–∞–∫, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∏ –∑—Ä–æ–±–∏—à —Å–µ–ª—Ñ—ñ –∑ –∫–æ—Ç–æ–º!",
    "–ù—ñ, —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ —Ç–≤—ñ–π –¥–µ–Ω—å –¥–ª—è —Ü—å–æ–≥–æ.",
    "–ú–æ–∂–ª–∏–≤–æ, –∞–ª–µ –∫—Ä–∞—â–µ –∑'—ó–∂ –ø–µ—á–∏–≤–æ!",
    "–¢–∞–∫, –∞–ª–µ –Ω–µ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞–π –Ω—ñ–∫–æ–º—É!",
    "–ù—ñ, –∞–ª–µ –Ω–µ –∑–∞—Å–º—É—á—É–π—Å—è!",
    "–ú–æ–∂–ª–∏–≤–æ... –í—Å–µ—Å–≤—ñ—Ç —â–µ –Ω–µ –≤–∏—Ä—ñ—à–∏–≤!",
    "–¢–∞–∫, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ç–∏ –ø–æ—Å–º—ñ—Ö–Ω–µ—à—Å—è!",
    "–ù—ñ, –∞–ª–µ –∑–∞–≤—Ç—Ä–∞ –≤—Å–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è!"
]

# --- –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def is_admin(user):
    if not user:
        return False
    return (user.id in admin_ids or 
            (user.username and user.username in admin_usernames))

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ä–º–∏ ---
def load_karma():
    try:
        with open(karmadata_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_karma(data):
    with open(karmadata_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

karma_data = load_karma()

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
session_name = f"–ö—Ä–∏–Ω–∂–∏–∫_{int(time.time())}_{random.randint(1000, 9999)}"
app = Client(session_name, api_id=api_id, api_hash=api_hash, bot_token=bot_token)

# --- –õ–æ–≥—ñ–∫–∞ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ callback) ---

async def process_spin_wheel(chat_id: str, user_id: str, reply_func):
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    if chat_id not in karma_data:
        karma_data[chat_id] = {}
    user_karma = karma_data[chat_id].get(user_id, {"score": 0, "last_spin_date": None})
    if user_karma.get("last_spin_date") == today.isoformat():
        await reply_func("üïê –ö–æ–ª–µ—Å–æ –¥–æ—Å—Ç—É–ø–Ω–µ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å.")
        return

    reward = randint(1, 5)
    user_karma["score"] += reward
    user_karma["last_spin_date"] = today.isoformat()
    karma_data[chat_id][user_id] = user_karma
    save_karma(karma_data)

    await reply_func(f"üé° –ö–æ–ª–µ—Å–æ –æ–±–µ—Ä–Ω—É–ª–æ—Å—å!\n+{reward} –æ—á–æ–∫!\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä–º–∞: {user_karma['score']}")

async def process_show_top_users(chat_id: str, reply_func, client=None):
    try:
        if chat_id not in karma_data:
            await reply_func("–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –º–∞—î –∫–∞—Ä–º–∏!")
            return
        sorted_users = sorted(karma_data[chat_id].items(), key=lambda x: x[1]['score'], reverse=True)
        text = "üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ —Ü—å–æ–≥–æ —á–∞—Ç—É:\n"
        for i, (uid, data) in enumerate(sorted_users[:5], 1):
            if "display_name" in data:
                display_name = data["display_name"]
            else:
                try:
                    if client:
                        user = await client.get_users(int(uid))
                        if user.username:
                            display_name = f"@{user.username}"
                        elif user.first_name:
                            display_name = user.first_name
                            if user.last_name:
                                display_name += f" {user.last_name}"
                        else:
                            display_name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid}"
                    else:
                        display_name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid}"
                except Exception as e:
                    display_name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid}"
            text += f"{i}. {display_name} ‚Äî {data['score']} –æ—á–æ–∫\n"
        await reply_func(text)
    except Exception as e:
        await reply_func(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ç–æ–ø—É: {e}")

async def process_show_karma(chat_id: str, user_id: str, reply_func, client=None):
    try:
        if chat_id not in karma_data:
            karma_data[chat_id] = {}
        user_karma = karma_data[chat_id].get(user_id, {"score": 0, "last_vote_date": None, "streak": 0})
        display_name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"
        if client:
            try:
                user = await client.get_users(int(user_id))
                username = user.username or user.first_name or f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}"
                display_name = f"@{username}" if user.username else username
            except Exception as e:
                pass
        await reply_func(
            f"üéØ –ö–∞—Ä–º–∞ {display_name}:\n"
            f"–û—á–∫–∏: {user_karma['score']}\n"
            f"–°—Ç—Ä–∏–∫: {user_karma.get('streak', 0)}"
        )
    except Exception as e:
        await reply_func(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –∫–∞—Ä–º–∏: {e}")

async def process_luckypoll(client):
    options = [choice(emojis) for _ in range(randint(2, 10))]
    correct_option_id = randint(0, len(options) - 1)
    poll = await client.send_poll(
        chat_id=channel_id,
        question=f'–ù–∞ –£–¥–∞—á—É {datetime.now().strftime("%d.%m.%y")}',
        options=options,
        is_anonymous=True,
        type=PollType.QUIZ,
        correct_option_id=correct_option_id,
        explanation='Maybe next time...'
    )
    active_polls[poll.poll.id] = {
        "correct_option_id": correct_option_id,
        "created_at": datetime.now()
    }

async def generate_funny_poll():
    """
    –ì–µ–Ω–µ—Ä—É—î –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ 4 –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ Google Gemini API.
    """
    prompt = (
        "–ó–≥–µ–Ω–µ—Ä—É–π –æ–¥–Ω–µ –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ, –∞–±—Å—É—Ä–¥–Ω–µ –∞–±–æ –∫—É–º–µ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –≤ Telegram —ñ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–æ –Ω—å–æ–≥–æ. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –≤–µ—Å–µ–ª–∏–º–∏, –Ω–µ –æ–±—Ä–∞–∑–ª–∏–≤–∏–º–∏, —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞ –∑–º—ñ—Å—Ç–æ–º. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–µ—Ä–Ω–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON: {\"question\": \"...\", \"options\": [\"...\", \"...\", ...]}"
    )
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        text = response.text
        if not text:
            raise Exception("Gemini –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        match = re.search(r'\{.*\}', text, re.DOTALL)
        if match:
            import json
            data = json.loads(match.group(0))
            question = data["question"]
            options = data["options"]
            if not (question and options and 2 < len(options) <= 10):
                raise Exception("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Gemini-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            return question, options
        else:
            raise Exception("Gemini –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ JSON")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (Gemini): {e}")
        return None, None

async def generate_horoscope_gemini():
    """
    –ì–µ–Ω–µ—Ä—É—î –∫–æ—Ä–æ—Ç–∫–∏–π –≤–µ—Å–µ–ª–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø —á–µ—Ä–µ–∑ Google Gemini API.
    """
    prompt = (
        "–ó–≥–µ–Ω–µ—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–µ—Å–µ–ª–∏–π, –∞–±—Å—É—Ä–¥–Ω–∏–π –∞–±–æ –∫—É–º–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –Ω–µ –±—ñ–ª—å—à–µ 2-3 —Ä–µ—á–µ–Ω—å, –±–µ–∑ –æ–±—Ä–∞–∑, –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º. "
        "–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø—É, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å."
    )
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        text = response.text.strip() if hasattr(response, 'text') else str(response)
        if not text:
            raise Exception("Gemini –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø—É")
        return text
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥–æ—Ä–æ—Å–∫–æ–ø—É (Gemini): {e}")
        return "–°—å–æ–≥–æ–¥–Ω—ñ —Ç–≤–æ—è –∫–∞—Ä–º–∞ –∑—Ä–æ—Å—Ç–µ –Ω–∞ 0.0001%! (fallback)"

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@app.on_message(filters.command("start"))
async def start(client, message):
    commands = [
        BotCommand("start", "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è"),
        BotCommand("karma", "–¢–≤–æ—è –∫–∞—Ä–º–∞"),
        BotCommand("top", "–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤"),
        BotCommand("wheel", "–ö–æ–ª–µ—Å–æ —É–¥–∞—á—ñ (1 —Ä–∞–∑/–¥–µ–Ω—å)"),
        BotCommand("setname", "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å–≤–æ—î —ñ–º'—è"),
        BotCommand("setname_reply", "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è —á–µ—Ä–µ–∑ reply"),
        BotCommand("myname", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—î —ñ–º'—è"),
        BotCommand("horoscope", "–ú—ñ–Ω—ñ-–≥–æ—Ä–æ—Å–∫–æ–ø"),
        BotCommand("yesno", "–ì—Ä–∞ –¢–∞–∫ —á–∏ –ù—ñ"),
        BotCommand("help", "–î–æ–ø–æ–º–æ–≥–∞"),
        BotCommand("character", "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"),
        BotCommand("funpoll", "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")
    ]
    await client.set_bot_commands(commands)
    await message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω—å üéØ")

@app.on_message(filters.command("go"))
async def luckypoll_command(client, message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(message.from_user):
        await message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
        return
    
    await message.delete()
    try:
        await process_luckypoll(client)
    except Exception as err:
        await message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {err}")

@app.on_message(filters.command("karma"))
async def show_karma_command(client, message):
    try:
        if not message.from_user:
            await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
            return
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        await process_show_karma(chat_id, user_id, message.reply_text, client)
    except Exception as e:
        await message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

@app.on_message(filters.command("top"))
async def show_top_users_command(client, message):
    chat_id = str(message.chat.id)
    await process_show_top_users(chat_id, message.reply_text, client)

@app.on_message(filters.command("wheel"))
async def spin_wheel_command(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
        return
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    await process_spin_wheel(chat_id, user_id, message.reply_text)

@app.on_message(filters.command("help"))
async def show_help(client, message):
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé° –ö–æ–ª–µ—Å–æ", callback_data="wheel")],
            [InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="top")],
            [InlineKeyboardButton("üéØ –ö–∞—Ä–º–∞", callback_data="karma")],
            [InlineKeyboardButton("üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂", callback_data="character")],
            [InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope")],
            [InlineKeyboardButton("‚ùì –¢–∞–∫ —á–∏ –ù—ñ", callback_data="yesno")],
            [InlineKeyboardButton("üéâ –ñ–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è", callback_data="funpoll")]
        ])

        help_text = (
            "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start ‚Äì –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
            "/karma ‚Äì —Ç–≤–æ—è –∫–∞—Ä–º–∞\n"
            "/top ‚Äì —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤\n"
            "/wheel ‚Äì –∫–æ–ª–µ—Å–æ —É–¥–∞—á—ñ (1 —Ä–∞–∑/–¥–µ–Ω—å)\n"
            "/setname ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å–≤–æ—î —ñ–º'—è\n"
            "/setname_reply ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è —á–µ—Ä–µ–∑ reply\n"
            "/myname ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—î —ñ–º'—è\n"
            "/horoscope ‚Äì –º—ñ–Ω—ñ-–≥–æ—Ä–æ—Å–∫–æ–ø\n"
            "/yesno ‚Äì –≥—Ä–∞ –¢–∞–∫ —á–∏ –ù—ñ\n"
            "/help ‚Äì –¥–æ–ø–æ–º–æ–≥–∞\n"
            "/character ‚Äì –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            "/funpoll ‚Äì —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ —á–∏ –≤—ñ–Ω –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
        if is_admin(message.from_user):
            pass
        
        await message.reply_text(help_text, reply_markup=keyboard)
    except Exception as e:
        await message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(traceback.format_exc())

@app.on_message(filters.command("test"))
async def test_command(client, message):
    try:
        if not message.from_user:
            await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
            return
            
        user_id = str(message.from_user.id)
        await message.reply_text(
            f"üß™ –¢–µ—Å—Ç –±–æ—Ç–∞:\n"
            f"–í–∞—à ID: {user_id}\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {len(karma_data)}\n"
            f"–í–∞—à—ñ –¥–∞–Ω—ñ: {karma_data.get(user_id, '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ')}\n"
            f"–ë–æ—Ç –ø—Ä–∞—Ü—é—î: ‚úÖ"
        )
    except Exception as e:
        await message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")

@app.on_message(filters.command("reload"))
async def reload_karma_command(client, message):
    try:
        global karma_data
        karma_data = load_karma()
        await message.reply_text(f"‚úÖ –î–∞–Ω—ñ –∫–∞—Ä–º–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(karma_data)}")
    except Exception as e:
        await message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")

@app.on_message(filters.command("myid"))
async def get_my_id(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
        return
        
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    await message.reply_text(f"üÜî –í–∞—à Telegram ID: {user_id}\n–Ü–º'—è: {username}")

@app.on_message(filters.command("setname"))
async def set_user_name(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setname <–≤–∞—à–µ —ñ–º'—è>\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /setname –Ü–≤–∞–Ω")
            return
            
        new_name = args[1].strip()
        if len(new_name) > 50:
            await message.reply_text("‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id not in karma_data:
            karma_data[chat_id] = {}
        if user_id not in karma_data[chat_id]:
            karma_data[chat_id][user_id] = {"score": 0, "last_vote_date": None, "streak": 0}
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        karma_data[chat_id][user_id]["display_name"] = new_name
        save_karma(karma_data)
        
        await message.reply_text(f"‚úÖ –í–∞—à–µ —ñ–º'—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ setname: {e}")
        await message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

@app.on_message(filters.command("setname_simple"))
async def set_user_name_simple(client, message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ setname_simple –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id if message.from_user else 'None'}")
    
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setname_simple <–≤–∞—à–µ —ñ–º'—è>\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /setname_simple –Ü–≤–∞–Ω")
            return
            
        new_name = args[1].strip()
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è: '{new_name}'")
        
        if len(new_name) > 50:
            await message.reply_text("‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª—é—é —ñ–º'—è '{new_name}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id not in karma_data:
            karma_data[chat_id] = {}
        if user_id not in karma_data[chat_id]:
            karma_data[chat_id][user_id] = {"score": 0, "last_vote_date": None, "streak": 0}
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        karma_data[chat_id][user_id]["display_name"] = new_name
        save_karma(karma_data)
        
        logger.info(f"–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        await message.reply_text(f"‚úÖ –í–∞—à–µ —ñ–º'—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ setname_simple: {e}")
        await message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

@app.on_message(filters.command("setname_reply"))
async def set_user_name_reply(client, message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ setname_reply –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {message.from_user.id if message.from_user else 'None'}")
    
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
        
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î reply –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not message.reply_to_message:
            logger.info("–ù–µ–º–∞—î reply –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            await message.reply_text(
                "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setname_reply\n"
                "1. –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ\n"
                "2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /setname_reply\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: –Ü–≤–∞–Ω\n"
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: /setname_reply (–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–Ü–≤–∞–Ω')"
            )
            return
            
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
        new_name = message.reply_to_message.text.strip()
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–º'—è: '{new_name}'")
        
        if len(new_name) > 50:
            await message.reply_text("‚ùå –Ü–º'—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
            
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª—é—é —ñ–º'—è '{new_name}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id not in karma_data:
            karma_data[chat_id] = {}
        if user_id not in karma_data[chat_id]:
            karma_data[chat_id][user_id] = {"score": 0, "last_vote_date": None, "streak": 0}
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        karma_data[chat_id][user_id]["display_name"] = new_name
        save_karma(karma_data)
        
        logger.info(f"–Ü–º'—è —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        await message.reply_text(f"‚úÖ –í–∞—à–µ —ñ–º'—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ setname_reply: {e}")
        await message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

@app.on_message(filters.command("update_users"))
async def update_users_info(client, message):
    if not is_admin(message.from_user):
        await message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
        return
        
    try:
        updated_count = 0
        for chat_id in karma_data.keys():
            for uid in karma_data[chat_id].keys():
                try:
                    user = await client.get_users(int(uid))
                    logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid}: {user.first_name} (@{user.username})")
                    updated_count += 1
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid}: {e}")
        
        await message.reply_text(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ {updated_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    except Exception as e:
        await message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

@app.on_message(filters.command("myname"))
async def show_user_name(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
        
    try:
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        user_data = karma_data.get(chat_id, {}).get(user_id, {})
        
        if "display_name" in user_data:
            await message.reply_text(f"üë§ –í–∞—à–µ —ñ–º'—è –≤ —Ç–æ–ø—ñ: {user_data['display_name']}")
        else:
            # –ü–æ–∫–∞–∑—É—î–º–æ Telegram —ñ–º'—è
            username = message.from_user.username or message.from_user.first_name
            display_name = f"@{username}" if message.from_user.username else username
            await message.reply_text(
                f"üë§ –£ –≤–∞—Å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–ª–∞—Å–Ω–µ —ñ–º'—è.\n"
                f"Telegram —ñ–º'—è: {display_name}\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /setname_reply —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å–≤–æ—î —ñ–º'—è –¥–ª—è —Ç–æ–ø—É."
            )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ myname: {e}")
        await message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

PIXABAY_API_KEY = "51035584-230539422b9389684289707a5"

@app.on_message(filters.command("character"))
async def character_command(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
    user_info = character_data.get(user_id, {})
    if user_info.get("last_character_date") == today:
        await message.reply_text("üîÅ –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å—å–æ–≥–æ–¥–Ω—ñ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    try:
        url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q=cartoon+character&image_type=photo&orientation=horizontal&safesearch=true&per_page=50"
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            hits = data.get("hits", [])
            if hits:
                img_url = random.choice(hits)["webformatURL"]
                user_info["last_character_date"] = today
                character_data[user_id] = user_info
                save_character_data(character_data)
                await message.reply_photo(img_url, caption="—Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏")
                return
            else:
                await message.reply_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ Pixabay.")
                return
        else:
            await message.reply_text(f"Pixabay API error: {resp.status_code}")
    except Exception as e:
        await message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")

@app.on_message(filters.command("horoscope"))
async def horoscope_command(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    prediction = await generate_horoscope_gemini()
    await message.reply_text(f"üåü –¢–≤—ñ–π –º—ñ–Ω—ñ-–≥–æ—Ä–æ—Å–∫–æ–ø:\n{prediction}")

@app.on_message(filters.command("yesno"))
async def yesno_command(client, message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /yesno –ß–∏ –±—É–¥–µ –¥–æ—â?")
        return
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    question = args[1].strip()
    answer = random.choice(yesno_answers)
    await message.reply_text(f"‚ùì {question}\nüí° {answer}")

@app.on_message(filters.command("funpoll"))
async def fun_poll_command(client, message):
    if not is_admin(message.from_user):
        await message.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
        return
    await message.reply_text("–ì–µ–Ω–µ—Ä—É—é –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è... ‚è≥")
    chat_id = str(message.chat.id)
    question, options = await generate_funny_poll()
    if not question or not options:
        await message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    try:
        poll = await client.send_poll(
            chat_id=channel_id,
            question=question,
            options=options,
            is_anonymous=True,
            type=PollType.REGULAR
        )
        await message.reply_text(f"–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª!\n–ü–∏—Ç–∞–Ω–Ω—è: {question}")
    except Exception as e:
        await message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: {e}")

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ ---

@app.on_callback_query()
async def handle_callbacks(client, callback_query):
    data = callback_query.data
    user_id = str(callback_query.from_user.id)
    msg = callback_query.message

    logger.info(f"CALLBACK: {data} –≤—ñ–¥ {user_id}")

    try:
        # –î–ª—è –≤—Å—ñ—Ö callback-—ñ–≤, —è–∫—ñ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é, –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        if data in ["top", "horoscope", "funpoll", "character"]:
            try:
                await msg.delete()
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

        if data == "wheel":
            await process_spin_wheel(str(msg.chat.id), user_id, msg.reply_text)
        elif data == "top":
            await process_show_top_users(str(msg.chat.id), msg.reply_text, client)
        elif data == "karma":
            await process_show_karma(str(msg.chat.id), user_id, msg.reply_text, client)
        elif data == "go":
            if not is_admin(callback_query.from_user):
                await msg.reply_text("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
                await callback_query.answer()
                return
            await callback_query.message.delete()
            await process_luckypoll(client)
        elif data == "character":
            class DummyMessage:
                def __init__(self, from_user, reply_photo, reply_text):
                    self.from_user = from_user
                    self.reply_photo = reply_photo
                    self.reply_text = reply_text
            dummy_msg = DummyMessage(callback_query.from_user, msg.reply_photo, msg.reply_text)
            await character_command(client, dummy_msg)
        elif data == "horoscope":
            await horoscope_command(client, msg)
        elif data == "yesno":
            await msg.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /yesno —Ç–∞ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è! –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /yesno –ß–∏ –±—É–¥–µ —â–∞—Å—Ç—è?")
        elif data == "funpoll":
            await fun_poll_command(client, msg)
        else:
            await msg.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ –∫–Ω–æ–ø–∫–∏.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ callback: {e}")
        await msg.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

    await callback_query.answer()

@app.on_message(filters.command("admin"))
async def admin_panel(client, message):
    if not message.from_user:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.")
        return
        
    if not is_admin(message.from_user):
        await message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
        return
    await message.reply_text(f"üëë –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(karma_data)}")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω—å (PollAnswer) ---

@app.on_raw_update()
async def handle_poll_answer_raw(client, update, users, chats):
    if update.__class__.__name__ != "UpdatePollAnswer":
        return

    user_id = str(update.user_id)
    poll_id = update.poll_id
    selected_option = update.option_ids[0]
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    correct_option = active_polls.get(poll_id, {}).get("correct_option_id")

    if correct_option is None:
        return

    chat_id = str(update.chat.id)
    if chat_id not in karma_data:
        karma_data[chat_id] = {}
    user_karma = karma_data[chat_id].get(user_id, {"score": 0, "last_vote_date": None, "streak": 0})
    user_karma["score"] += 1  # —É—á–∞—Å—Ç—å

    last_vote_str = user_karma.get("last_vote_date")
    if last_vote_str:
        last_vote_date = datetime.strptime(last_vote_str, '%Y-%m-%dT%H:%M:%S').replace(hour=0, minute=0, second=0, microsecond=0)
        if last_vote_date == today - timedelta(days=1):
            user_karma["streak"] = user_karma.get("streak", 0) + 1
        elif last_vote_date < today - timedelta(days=1):
            user_karma["streak"] = 1
    else:
        user_karma["streak"] = 1

    if user_karma["streak"] >= 3:
        user_karma["score"] += 2 + (user_karma["streak"] - 3)

    if selected_option == correct_option:
        user_karma["score"] += 2

    user_karma["last_vote_date"] = today.isoformat()
    karma_data[chat_id][user_id] = user_karma
    save_karma(karma_data)

    try:
        await client.send_message(int(user_id), f"üéâ –û—Ç—Ä–∏–º–∞–Ω–æ –æ—á–∫–∏!\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä–º–∞: {user_karma['score']}")
    except Exception as e:
        logger.warning(f"–ù–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

# --- –ó–∞–ø—É—Å–∫ ---

if __name__ == "__main__":
    # –Ø–∫—â–æ —Ñ–∞–π–ª –∑ –∫–∞—Ä–º–æ—é –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É—Å—Ç–∏–π
    if not os.path.exists(karmadata_file):
        with open(karmadata_file, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)

    # –Ø–∫—â–æ —Ñ–∞–π–ª –∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É—Å—Ç–∏–π
    if not os.path.exists(character_data_file):
        with open(character_data_file, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=4)

    print(f"{bot_name} –∑–∞–ø—É—â–µ–Ω–æ...")
    try:
        app.run()
    except Exception as e:
        if "FLOOD_WAIT" in str(e):
            print("‚ö†Ô∏è Telegram –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ —Å–ø—Ä–æ–±–∏.")
            print("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ 30-40 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é.")
            print(f"üìù –ü–æ–º–∏–ª–∫–∞: {e}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
